buildscript {
    ext {
        springVersion = '4.3.25.RELEASE'
        springBootVersion = '1.5.22.RELEASE'
        springSecurityVersion = '4.2.5.RELEASE'
        springCloudVersion = '1.4.7.RELEASE'
        ignightVersion = '2.7.6'
    }
    repositories {
        if (gradle.startParameter.isOffline()) {
            flatDir {
                dir "./gradle/repository"
            }
        } else {
            jcenter()
            maven {
                url "https://plugins.gradle.org/m2/"
            }
        }
    }
    dependencies {
        if (gradle.startParameter.isOffline()) {
            classpath fileTree(dir: "./gradle/lib", includes: ['*.jar'])
        } else {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
            classpath "gradle.plugin.com.github.viswaramamoorthy:gradle-util-plugins:0.1.0-RELEASE"
        }
    }
}

apply plugin: 'org.springframework.boot'
apply plugin: 'java'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'war'
apply plugin: 'ManifestClasspath'

project.ext {
    javaVersion = "1.8"
    javaEncoding = "UTF-8"
}

sourceCompatibility = javaVersion
targetCompatibility = javaVersion

springBoot {
    mainClass = "sample.SampleApplication"
}

bootRun {
    jvmArgs = [
            "-Dfile.encoding=${javaEncoding}"
    ]
}

[compileJava, compileTestJava]*.options*.encoding = javaEncoding

tasks.withType(JavaCompile) {
    options.encoding = javaEncoding
}

repositories {
    if (gradle.startParameter.isOffline()) {
        flatDir {
            dir "./gradle/repository"
        }
    } else {
        jcenter()
        mavenCentral()
    }
}

configurations {
    offline.extendsFrom implementation
}

dependencies {

    if (gradle.startParameter.taskRequests && gradle.startParameter.taskRequests.args) {
        if ("bootWarOffline" == gradle.startParameter.taskRequests.getAt(0).args.getAt(0)) {
            gradle.startParameter.offline = true
        }
    }

    println "offline : " + gradle.startParameter.isOffline()

    if (gradle.startParameter.isOffline()) {
        implementation fileTree(dir: 'lib/offline', include: ['*.jar'])
    } else {
        implementation fileTree(dir: 'lib/complie', include: ['*.jar'])

        implementation "org.jsoup:jsoup:1.11.2"
        implementation "org.aspectj:aspectjweaver:1.9.1"
        implementation "commons-codec:commons-codec:1.10"
        implementation "commons-io:commons-io:2.5"
        implementation "commons-fileupload:commons-fileupload:1.3.3"
        implementation "org.apache.commons:commons-compress:1.18"
        implementation "org.apache.commons:commons-exec:1.3"
        implementation "org.apache.commons:commons-text:1.6"
        implementation "org.apache.httpcomponents:httpclient:4.5"

        implementation "org.springframework:spring-aop:${springVersion}"
        implementation "org.springframework:spring-websocket:${springVersion}"
        implementation "org.springframework:spring-messaging:${springVersion}"
        implementation "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
        implementation "org.springframework.boot:spring-boot-starter-cache:${springBootVersion}"
        implementation "org.springframework.security:spring-security-web:${springSecurityVersion}"
        implementation "org.springframework.security:spring-security-config:${springSecurityVersion}"
        implementation "org.springframework.cloud:spring-cloud-starter-openfeign:${springCloudVersion}"
        implementation "org.springframework.cloud:spring-cloud-starter-netflix-hystrix:${springCloudVersion}"
    }
}

task copyLibs(type: Copy) {
    from configurations.offline
    into 'lib/offline'
}

task bootWarOffline {
    group 'build'
    dependsOn 'bootRepackage'
}

/*
plugins {
    id 'org.springframework.boot' version '2.2.4.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

test {
    useJUnitPlatform()
}
*/